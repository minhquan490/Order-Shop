plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id "io.freefair.aspectj"
}

group = 'com.bachlinh.order'
version = "${libs.versions.mainProject.get()}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation project(":aot")
    implementation project(":batch")
    implementation project(":http")
    implementation project(":common:core")
    implementation project(":common:entity")
    implementation project(":common:handler")
    implementation project(":common:security")
    implementation project(":repository")
    implementation project(":common:trigger")
    implementation project(":common:validate")
    implementation project(":common:mail")
    implementation project(":common:data-transfer")
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'org.hibernate.orm:hibernate-core'
    implementation 'com.zaxxer:HikariCP'
    implementation "com.lmax:disruptor:${libs.versions.disruptor.get()}"
    implementation "io.grpc:grpc-all:${libs.versions.grpc.get()}"
    implementation "ch.qos.logback:logback-core:${libs.versions.logback.get()}"
    implementation "ch.qos.logback:logback-classic:${libs.versions.logback.get()}"
    implementation "org.slf4j:slf4j-api:${libs.versions.slf4j.get()}"
    implementation "io.netty.incubator:netty-incubator-codec-http3:${libs.versions.nettyQuic.get()}"
    implementation "com.google.apis:google-api-services-gmail:${libs.versions.gmailApi.get()}"
    implementation 'org.aspectj:aspectjrt'
    implementation "io.netty:netty-codec-stomp:${libs.versions.netty.get()}"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor project(":annotation-processor")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly "io.grpc:grpc-census:${libs.versions.grpc.get()}"
    runtimeOnly "org.bouncycastle:bcpkix-jdk15on:${libs.versions.bouncycastle.get()}"
    runtimeOnly "io.opencensus:opencensus-impl:${libs.versions.opencensus.get()}"
    runtimeOnly "io.opentelemetry:opentelemetry-opentracing-shim:${libs.versions.opentelemetry.get()}"
    runtimeOnly "ch.qos.logback:logback-access:${libs.versions.logback.get()}"
    runtimeOnly 'org.aspectj:aspectjweaver'
    runtimeOnly 'org.aspectj:aspectjrt'
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

compileJava {
    options.compilerArgs.addAll(['--release', '21'])
    options.compilerArgs.addAll(['--enable-preview'])
}

bootJar {
    enabled = true
}

jar {
    enabled = false
}