plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.graalvm.buildtools.native'
}

group = 'com.bachlinh.order'
version = '1.0.0'

dependencies {
    implementation project(":aot")
    implementation project(":common:analyzer")
    implementation project(":batch")
    implementation project(":service")
    implementation project(":common:annotation")
    implementation project(":common:core")
    implementation project(":common:entity")
    implementation project(":common:handler")
    implementation project(":common:security")
    implementation project(":common:utils")
    implementation project(":common:repository")
    implementation project(":common:exception")
    implementation project(":common:environment")
    implementation project(":common:setup")
    implementation project(":common:trigger")
    implementation project(":common:validate")
    implementation project(":common:mail")
    implementation project(":common:data-transfer")
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'javax.cache:cache-api'
    implementation 'org.hibernate.orm:hibernate-core'
    implementation 'org.hibernate.orm:hibernate-jcache'
    implementation 'com.zaxxer:HikariCP'
    implementation "com.lmax:disruptor:${libs.versions.disruptor.get()}"
    implementation "io.grpc:grpc-all:${libs.versions.grpc.get()}"
    implementation "ch.qos.logback:logback-core:${libs.versions.logback.get()}"
    implementation "ch.qos.logback:logback-classic:${libs.versions.logback.get()}"
    implementation "org.slf4j:slf4j-api:${libs.versions.slf4j.get()}"
    implementation "org.apache.lucene:lucene-core:${libs.versions.lunceneVersion.get()}"
    implementation "org.apache.lucene:lucene-queryparser:${libs.versions.lunceneVersion.get()}"
    implementation "org.apache.lucene:lucene-analysis-common:${libs.versions.lunceneVersion.get()}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor project(":annotation-processor")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly "io.grpc:grpc-census:${libs.versions.grpc.get()}"
    runtimeOnly "org.bouncycastle:bcpkix-jdk15on:${libs.versions.bouncycastle.get()}"
    runtimeOnly "io.opencensus:opencensus-impl:${libs.versions.opencensus.get()}"
    runtimeOnly "io.opentelemetry:opentelemetry-opentracing-shim:${libs.versions.opentelemetry.get()}"
    runtimeOnly "ch.qos.logback:logback-access:${libs.versions.logback.get()}"

    modules {
        module("org.springframework.boot:spring-boot-starter-tomcat") {
            replacedBy("org.springframework.boot:spring-boot-starter-jetty", "Use Jetty instead of Tomcat")
        }
    }
}

test {
    useJUnitPlatform()
}

//processAot {
//    jvmArgs(List.of('-Xmx6096M'))
//}

bootJar {
    enabled = true
}

jar {
    enabled = false
}