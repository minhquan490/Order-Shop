/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: front-grpc-handler.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.bachlinh.order.core.server.grpc {
    export class InboundMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            method?: string;
            headers?: Map<string, string>;
            remoteAddress?: string;
            body?: Uint8Array;
            requestId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("remoteAddress" in data && data.remoteAddress != undefined) {
                    this.remoteAddress = data.remoteAddress;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get remoteAddress() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set remoteAddress(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set body(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            url?: string;
            method?: string;
            headers?: {
                [key: string]: string;
            };
            remoteAddress?: string;
            body?: Uint8Array;
            requestId?: string;
        }): InboundMessage {
            const message = new InboundMessage({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.method != null) {
                message.method = data.method;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.remoteAddress != null) {
                message.remoteAddress = data.remoteAddress;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                method?: string;
                headers?: {
                    [key: string]: string;
                };
                remoteAddress?: string;
                body?: Uint8Array;
                requestId?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.remoteAddress != null) {
                data.remoteAddress = this.remoteAddress;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.method.length)
                writer.writeString(2, this.method);
            for (const [key, value] of this.headers) {
                writer.writeMessage(3, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.remoteAddress.length)
                writer.writeString(4, this.remoteAddress);
            if (this.body.length)
                writer.writeBytes(5, this.body);
            if (this.requestId.length)
                writer.writeString(6, this.requestId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InboundMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InboundMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.method = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 4:
                        message.remoteAddress = reader.readString();
                        break;
                    case 5:
                        message.body = reader.readBytes();
                        break;
                    case 6:
                        message.requestId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InboundMessage {
            return InboundMessage.deserialize(bytes);
        }
    }
    export class OutboundMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: number;
            headers?: Map<string, string>;
            body?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set body(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: number;
            headers?: {
                [key: string]: string;
            };
            body?: Uint8Array;
        }): OutboundMessage {
            const message = new OutboundMessage({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: number;
                headers?: {
                    [key: string]: string;
                };
                body?: Uint8Array;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != 0)
                writer.writeInt32(1, this.status);
            for (const [key, value] of this.headers) {
                writer.writeMessage(2, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.body.length)
                writer.writeBytes(3, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OutboundMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OutboundMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.body = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OutboundMessage {
            return OutboundMessage.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGrpcHandlerService {
        static definition = {
            handleGrpcCall: {
                path: "/com.bachlinh.order.core.server.grpc.GrpcHandler/handleGrpcCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InboundMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InboundMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OutboundMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OutboundMessage.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract handleGrpcCall(call: grpc_1.ServerUnaryCall<InboundMessage, OutboundMessage>, callback: grpc_1.sendUnaryData<OutboundMessage>): void;
    }
    export class GrpcHandlerClient extends grpc_1.makeGenericClientConstructor(UnimplementedGrpcHandlerService.definition, "GrpcHandler", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        handleGrpcCall: GrpcUnaryServiceInterface<InboundMessage, OutboundMessage> = (message: InboundMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OutboundMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OutboundMessage>, callback?: grpc_1.requestCallback<OutboundMessage>): grpc_1.ClientUnaryCall => {
            return super.handleGrpcCall(message, metadata, options, callback);
        };
    }
}
