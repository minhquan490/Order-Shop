plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
    id 'java-library'
}

group = 'com.bachlinh.order'
version = "${libs.versions.mainProject.get()}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.google.apis:google-api-services-gmail:${libs.versions.gmailApi.get()}"
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation "io.grpc:grpc-netty:${libs.versions.grpc.get()}"
    implementation "io.grpc:grpc-protobuf:${libs.versions.grpc.get()}"
    implementation "io.grpc:grpc-stub:${libs.versions.grpc.get()}"
    implementation "ch.qos.logback:logback-core:${libs.versions.logback.get()}"
    implementation "ch.qos.logback:logback-classic:${libs.versions.logback.get()}"
    implementation "org.slf4j:slf4j-api:${libs.versions.slf4j.get()}"
    implementation "io.netty:netty-all:${libs.versions.netty.get()}"
    implementation "io.netty.incubator:netty-incubator-codec-http3:${libs.versions.nettyQuic.get()}"
    implementation "com.google.guava:guava:${libs.versions.guavaVersion.get()}"
    compileOnly "jakarta.servlet:jakarta.servlet-api"
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
    compileOnly 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.apache.lucene:lucene-core:${libs.versions.lunceneVersion.get()}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
            include '**/*.protodevel'
        }
    }
    test {
        proto {
            srcDir 'src/test/proto'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${libs.versions.protoc.get()}"
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.55.1"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}